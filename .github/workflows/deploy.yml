name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (prod or staging)'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - staging
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
  push:
    branches: [ main ]

env:
  PROD_DOMAIN: lucidledger.co
  STAGING_DOMAIN: staging.lucidledger.co
  NODE_VERSION: '20'

jobs:
  # Pre-deployment tests
  pre-deploy-tests:
    name: Pre-Deploy Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Test Frontend Build
      working-directory: ./client
      env:
        VITE_API_BASE_URL: https://api.lucidledger.co/api
      run: |
        npm ci
        npm run build

    - name: Test Backend Build
      working-directory: ./server
      run: |
        npm ci
        # Test if server can start
        timeout 10s npm start || echo "Server start test completed"

    - name: Test Docker Builds
      run: |
        # Test frontend Docker build
        docker build -t lucidledger-frontend:test ./client
        docker build -t lucidledger-frontend:test-prod -f ./client/Dockerfile.prod ./client
        
        # Test backend Docker build
        docker build -t lucidledger-backend:test ./server
        docker build -t lucidledger-backend:test-prod -f ./server/Dockerfile.prod ./server
        
        # Test docker-compose configuration
        docker-compose config
        docker-compose -f docker-compose.prod.yml config
      

  deploy:
    name: Deploy Full-Stack to EC2
    needs: pre-deploy-tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select target host/user
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "TARGET_HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
          echo "TARGET_USER=${{ secrets.STAGING_USER }}" >> $GITHUB_ENV
          echo "TARGET_KEY<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.STAGING_SSH_KEY }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "TARGET_HOST=${{ secrets.EC2_HOST }}" >> $GITHUB_ENV
          echo "TARGET_USER=${{ secrets.EC2_USER }}" >> $GITHUB_ENV
          echo "TARGET_KEY<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ env.TARGET_KEY }}
        
    - name: Add EC2 to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H "$TARGET_HOST" >> ~/.ssh/known_hosts
        
    - name: Deploy Full-Stack Application
      run: |
        # Create comprehensive deployment script
        cat > deploy-fullstack.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting full-stack deployment..."
        
        # Set domain and configuration based on environment
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          DOMAIN="${{ env.STAGING_DOMAIN }}"
          BRANCH="${{ github.event.inputs.branch }}"
          [ -z "$BRANCH" ] && BRANCH=develop
          REPO_DIR="/home/ec2-user/lucidledger-staging"
          COMPOSE_FILE="docker-compose.prod.yml"
          API_DOMAIN="https://api-staging.lucidledger.co"
        else
          DOMAIN="${{ env.PROD_DOMAIN }}"
          BRANCH="${{ github.event.inputs.branch }}"
          [ -z "$BRANCH" ] && BRANCH=main
          REPO_DIR="/home/ec2-user/lucidledger"
          COMPOSE_FILE="docker-compose.prod.yml"
          API_DOMAIN="https://api.lucidledger.co"
        fi
        
        echo "📍 Environment: ${{ github.event.inputs.environment }}"
        echo "🌐 Domain: $DOMAIN"
        echo "🔗 API Domain: $API_DOMAIN"
        echo "📁 Repository: $REPO_DIR"
        
        # Navigate to project directory
        cd "$REPO_DIR" || cd /home/ubuntu/$(basename "$REPO_DIR")
        
        # Pull latest changes
        echo "📥 Pulling latest changes from $BRANCH branch..."
        git fetch origin
        git checkout "$BRANCH"
        git pull origin "$BRANCH"
        
        # Create environment files if they don't exist
        echo "📝 Setting up environment files..."
        
        # Backend environment
        if [ ! -f "server/.env.prod" ]; then
          echo "Creating server/.env.prod..."
          cat > server/.env.prod << EOL
# Database Configuration
DB_HOST=${{ secrets.DB_HOST }}
DB_PORT=${{ secrets.DB_PORT }}
DB_NAME=${{ secrets.DB_NAME }}
DB_USER=${{ secrets.DB_USER }}
DB_PASSWORD=${{ secrets.DB_PASSWORD }}

# Server Configuration
PORT=5001
NODE_ENV=production

# CORS Configuration
CORS_ORIGIN=https://$DOMAIN
EOL
        fi
        
        # Frontend environment
        if [ ! -f "client/.env.prod" ]; then
          echo "Creating client/.env.prod..."
          cat > client/.env.prod << EOL
# Dynamic Labs Configuration
VITE_DYNAMIC_ENV_ID=${{ secrets.VITE_DYNAMIC_ENV_ID }}

# API Configuration
VITE_API_BASE_URL=$API_DOMAIN/api

# Environment
NODE_ENV=production
EOL
        fi
        
        # Stop existing services
        echo "🛑 Stopping existing services..."
        docker-compose -f "$COMPOSE_FILE" down || true
        
        # Clean up old images to save space
        echo "🧹 Cleaning up old Docker images..."
        docker image prune -f || true
        
        # Rebuild and start services
        echo "🔨 Building and starting full-stack services..."
        docker-compose -f "$COMPOSE_FILE" up -d --build --force-recreate
        
        # Wait for services to be ready
        echo "⏳ Waiting for services to be ready..."
        sleep 90
        
        # Check service status
        echo "📊 Checking service status..."
        docker-compose -f "$COMPOSE_FILE" ps
        
        # Health checks
        echo "🏥 Running health checks..."
        
        # Check backend health
        echo "Checking backend health..."
        BACKEND_HEALTH_RETRIES=0
        while [ $BACKEND_HEALTH_RETRIES -lt 10 ]; do
          if curl -f -s --max-time 10 "$API_DOMAIN/api/health" > /dev/null; then
            echo "✅ Backend health check passed"
            break
          else
            echo "⏳ Backend not ready, waiting 10 seconds..."
            sleep 10
            BACKEND_HEALTH_RETRIES=$((BACKEND_HEALTH_RETRIES + 1))
          fi
        done
        
        if [ $BACKEND_HEALTH_RETRIES -eq 10 ]; then
          echo "❌ Backend health check failed"
          echo "📊 Backend logs:"
          docker-compose -f "$COMPOSE_FILE" logs backend --tail=50
          exit 1
        fi
        
        # Check frontend
        echo "Checking frontend..."
        FRONTEND_HEALTH_RETRIES=0
        while [ $FRONTEND_HEALTH_RETRIES -lt 10 ]; do
          if curl -f -s --max-time 10 "https://$DOMAIN" > /dev/null; then
            echo "✅ Frontend health check passed"
            break
          else
            echo "⏳ Frontend not ready, waiting 10 seconds..."
            sleep 10
            FRONTEND_HEALTH_RETRIES=$((FRONTEND_HEALTH_RETRIES + 1))
          fi
        done
        
        if [ $FRONTEND_HEALTH_RETRIES -eq 10 ]; then
          echo "❌ Frontend health check failed"
          echo "📊 Frontend logs:"
          docker-compose -f "$COMPOSE_FILE" logs frontend --tail=50
          exit 1
        fi
        
        # Final deployment test
        echo "🧪 Running final deployment tests..."
        
        # Test API endpoints
        echo "Testing API endpoints..."
        curl -f -s "$API_DOMAIN/api/employees" > /dev/null || echo "Employees endpoint test completed"
        curl -f -s "$API_DOMAIN/api/employers" > /dev/null || echo "Employers endpoint test completed"
        curl -f -s "$API_DOMAIN/api/jobs" > /dev/null || echo "Jobs endpoint test completed"
        
        # Test frontend
        echo "Testing frontend..."
        curl -f -s "https://$DOMAIN" > /dev/null || echo "Frontend test completed"
        
        echo "🎉 Full-stack deployment completed successfully!"
        echo "🌐 Frontend: https://$DOMAIN"
        echo "🔗 Backend API: $API_DOMAIN"
        echo "📊 Service Status:"
        docker-compose -f "$COMPOSE_FILE" ps
        EOF
        
        chmod +x deploy-fullstack.sh
        
        # Execute deployment script on EC2
        ssh -o StrictHostKeyChecking=no "$TARGET_USER"@"$TARGET_HOST" 'bash -s' < deploy-fullstack.sh
        
    - name: Deployment Status
      run: |
        echo "🎯 Full-stack deployment completed!"
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "🌐 Staging Frontend: https://${{ env.STAGING_DOMAIN }}"
          echo "🔗 Staging API: https://api-staging.lucidledger.co"
        else
          echo "🌐 Production Frontend: https://${{ env.PROD_DOMAIN }}"
          echo "🔗 Production API: https://api.lucidledger.co"
        fi
        echo "📱 Check the deployment logs above for any errors"
        echo "🏥 Health checks should have verified all services are running"
