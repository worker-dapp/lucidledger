name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (prod or staging)'
        required: true
        default: 'prod'
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
  push:
    branches: [ main ]

env:
  PROD_DOMAIN: lucidledger.co
  STAGING_DOMAIN: staging.lucidledger.co

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js (client)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./client
      run: |
        npm config set cache .npm-cache
        npm install

    - name: Build frontend
      working-directory: ./client
      env:
        VITE_API_URL: https://lucidledger.co
      run: npm run build
      
    - name: Run frontend tests
      working-directory: ./client
      run: npm run lint || echo "ESLint issues found, but continuing deployment"
      

  deploy:
    name: Deploy to EC2
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select target host/user
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "TARGET_HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
          echo "TARGET_USER=${{ secrets.STAGING_USER }}" >> $GITHUB_ENV
          echo "TARGET_KEY<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.STAGING_SSH_KEY }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "TARGET_HOST=${{ secrets.EC2_HOST }}" >> $GITHUB_ENV
          echo "TARGET_USER=${{ secrets.EC2_USER }}" >> $GITHUB_ENV
          echo "TARGET_KEY<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ env.TARGET_KEY }}
        
    - name: Add EC2 to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H "$TARGET_HOST" >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting deployment..."
        
        # Set domain based on input
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          DOMAIN="${{ env.STAGING_DOMAIN }}"
          BRANCH="${{ github.event.inputs.branch }}"
          [ -z "$BRANCH" ] && BRANCH=develop
          REPO_DIR="/home/ec2-user/lucidledger-staging"
        else
          DOMAIN="${{ env.PROD_DOMAIN }}"
          BRANCH="${{ github.event.inputs.branch }}"
          [ -z "$BRANCH" ] && BRANCH=main
          REPO_DIR="/home/ec2-user/lucidledger"
        fi
        
        # Navigate to project directory
        cd "$REPO_DIR" || cd /home/ubuntu/$(basename "$REPO_DIR")
        
        # Pull latest changes
        echo "üì• Pulling latest changes..."
        git pull origin "$BRANCH"
        
        # Stop existing services
        echo "üõë Stopping existing services..."
        docker-compose -f docker-compose.nginx.yml down || true
        
        # Rebuild and start services
        echo "üî® Rebuilding and starting services..."
        docker-compose -f docker-compose.nginx.yml up -d --build
        
        # Wait for services to be ready
        echo "‚è≥ Waiting for services to be ready..."
        sleep 60
        
        # Check service status
        echo "üìä Checking service status..."
        docker-compose -f docker-compose.nginx.yml ps
        
        # Test deployment with retries
        echo "üß™ Testing deployment..."
        MAX_RETRIES=5
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
          
          if curl -f -s --max-time 30 https://$DOMAIN > /dev/null; then
            echo "‚úÖ Deployment successful! App accessible at https://$DOMAIN"
            break
          else
            echo "‚è≥ App not ready yet, waiting 30 seconds..."
            sleep 30
            RETRY_COUNT=$((RETRY_COUNT + 1))
          fi
        done
        
        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "‚ùå Deployment test failed after $MAX_RETRIES attempts"
          echo "üìä Checking service logs..."
          docker-compose -f docker-compose.nginx.yml logs --tail=50
          exit 1
        fi
        
        echo "üéâ Deployment completed successfully!"
        EOF
        
        chmod +x deploy.sh
        
        # Execute deployment script on EC2
        ssh -o StrictHostKeyChecking=no "$TARGET_USER"@"$TARGET_HOST" 'bash -s' < deploy.sh
        
    - name: Deployment Status
      run: |
        echo "üéØ Deployment completed!"
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "üåê Staging at: https://${{ env.STAGING_DOMAIN }}"
        else
          echo "üåê Production at: https://${{ env.PROD_DOMAIN }}"
        fi
        echo "üì± Check the deployment status above for any errors"
